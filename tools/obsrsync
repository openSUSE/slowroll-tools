#!/usr/bin/perl -w
# sync sources and binaries in a project
# e.g. openSUSE:Slowroll:Base:2 and openSUSE:Factory
# support partial sync via filter function
# like rsync, this should be efficient in handling deltions, additions and updates
# overlaps with tools/syncslob
# usage:
# DRYRUN=0 DELETE=1 tools/obsrsync $(cat in/missing-dvd-rpms)
use strict;
use XML::Bare;
use lib 'lib';
use common;


my $src = $ENV{syncsource} || "openSUSE:Factory";
my $dest = $ENV{slobase};
my $maxmtime = $ENV{maxmtime};
my @pkgs = @ARGV;
if (!@pkgs) {
    die "usage: $0 PGK1 PKG2 ..."
}
my $dry = ($ENV{DRYRUN}//1)==0 ? "":"echo";
my $srcbin = load_json("out/pkgmapsrcbin");
my %binsrc;
my %allbins;
while(my @a = each(%$srcbin)) {
    my $p = $a[0]; $p=~s/:.*//;
    push(@{$allbins{$p}}, @{$a[1]});
    foreach my $bin (@{$a[1]}) {
        $binsrc{$bin} = $a[0];
    }
} 
#my $src32ref  = new XML::Bare(text => cache_or_run("cache/factory-i586.xml", sub{ `osc api /build/$src/standard/i586/_repository?view=binaryversions` })) ->parse();
my $srcref  = new XML::Bare(text => cache_or_run("cache/factory-x86_64.xml", sub{ `osc api /build/$src/standard/x86_64/_repository?view=binaryversions` }, 6*3600)) ->parse();
#my $dest32ref = new XML::Bare(text => cache_or_run("cache/slob-i586.xml",   sub{ `osc api /build/$dest/standard/i586/_repository?view=binaryversions` })) ->parse();
my $destref = new XML::Bare(text => cache_or_run("cache/slob-x86_64.xml",   sub{ `osc api /build/$dest/standard/x86_64/_repository?view=binaryversions` }, 6*3600)) ->parse();
my $srclist = cache_or_run("cache/factory.ls", sub{`osc ls $src | grep -v :`}, 6*3600);
my $destlist = cache_or_run("cache/slob.ls", sub{`osc ls $dest | grep -v :`}, 6*3600);
mkdir("cache/factory-bin");

sub process_binaryversions($)
{ my ($ref) = @_;
    my %ret=();
    foreach my $bin (@{$ref->{binaryversionlist}->{binary}}) {
        my $name = $bin->{name}->{value}; $name =~ s/\.rpm$//;
	$ret{$name} = $bin->{hdrmd5}->{value};
    }
    $_[0] = \%ret; # replace input - slightly unclean but easier to use
    return \%ret;
}

process_binaryversions($srcref);
process_binaryversions($destref);

my %submitted;
for my $pkg (@pkgs) {
    next if $submitted{$pkg}++;
    my $allsynced = 1;
    foreach my $bin (@{$allbins{$pkg}}) {
	my $srcver=$srcref->{$bin};
        next unless $srcver;
        my $destver=$destref->{$bin}//"missing";
        #diag("comparing $pkg $bin $srcver $destver");
        if($destver ne $srcver) {$allsynced=0; diag("$bin different for $pkg")}
    }
    next if $allsynced;
    if($maxmtime) {
        my $xml = cache_or_run("cache/factory-bin/$pkg", sub{ `osc api /build/openSUSE:Factory/standard/x86_64/$pkg` }, 6*3600);
        if($xml =~ m/src\.rpm" size="\d+" mtime="(\d+)"/) {
            next if $1 > $maxmtime;
        }
    }
    system "$dry osc release --no-delay $src --target-project=$dest '$pkg' --target-repository=standard -r standard"
}

# find deleted pkgs
if($ENV{DELETE}//0 eq "1") {
    my %srcpkg = map { $_=>1 } split("\n", $srclist);
    for my $pkg (split("\n", $destlist)) {
        die if $pkg =~ m/[^a-zA-Z0-9,.+_-]/;
        next if $srcpkg{$pkg};
        diag "deleting $dest $pkg";
        system("$dry osc rdelete --force -m obsrsync $dest $pkg")
    }
}
